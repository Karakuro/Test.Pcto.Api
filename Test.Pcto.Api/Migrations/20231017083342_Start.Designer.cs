// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Pcto.Api.Data;

#nullable disable

namespace Test.Pcto.Api.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20231017083342_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassGroup", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassSectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "ClassSectionId");

                    b.HasIndex("ClassSectionId");

                    b.ToTable("ClassGroups");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassRoom", b =>
                {
                    b.Property<int>("ClassRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassRoomId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassSection", b =>
                {
                    b.Property<int>("ClassSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassSectionId");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("ClassSections");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Degree", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "SubjectId", "ExamId");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassSectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassSectionId");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Presence", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("Presences");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndOfYear")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartOfYear")
                        .HasColumnType("TEXT");

                    b.HasKey("SchoolYearId");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TutorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Tutor", b =>
                {
                    b.Property<int>("TutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TutorId");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassGroup", b =>
                {
                    b.HasOne("Test.Pcto.Api.Data.ClassSection", "ClassSection")
                        .WithMany("ClassGroups")
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSection");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassSection", b =>
                {
                    b.HasOne("Test.Pcto.Api.Data.ClassRoom", null)
                        .WithMany("Sections")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Course", null)
                        .WithMany("ClassSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.SchoolYear", null)
                        .WithMany("Sections")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Degree", b =>
                {
                    b.HasOne("Test.Pcto.Api.Data.Exam", "Exam")
                        .WithMany("Degrees")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Student", "Student")
                        .WithMany("Degrees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Subject", "Subject")
                        .WithMany("Degrees")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Lesson", b =>
                {
                    b.HasOne("Test.Pcto.Api.Data.ClassSection", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Exam", "Exam")
                        .WithMany("Lessons")
                        .HasForeignKey("ExamId");

                    b.HasOne("Test.Pcto.Api.Data.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Section");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Presence", b =>
                {
                    b.HasOne("Test.Pcto.Api.Data.Lesson", "Lesson")
                        .WithMany("Presences")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Pcto.Api.Data.Student", "Student")
                        .WithMany("Presences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Student", b =>
                {
                    b.HasOne("Test.Pcto.Api.Data.Tutor", "Tutor")
                        .WithMany("Students")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassRoom", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.ClassSection", b =>
                {
                    b.Navigation("ClassGroups");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Course", b =>
                {
                    b.Navigation("ClassSections");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Exam", b =>
                {
                    b.Navigation("Degrees");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Lesson", b =>
                {
                    b.Navigation("Presences");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.SchoolYear", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Student", b =>
                {
                    b.Navigation("Degrees");

                    b.Navigation("Presences");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Subject", b =>
                {
                    b.Navigation("Degrees");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Teacher", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Test.Pcto.Api.Data.Tutor", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
